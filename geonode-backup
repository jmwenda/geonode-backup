#!/bin/bash

# Backup script, meant to me run at the geonode mirror.
# Make sure to enable passwordless access from the mirror to the original site.
# Authors: Jude Mwenda, Ariel Nunez
# Minor Changes by: Emmanuel Crown
#NOTE: This tool requires pgsql_schema_diff.py to be installed first
# cd /usr/bin
# https://raw.github.com/gist/380278/140b133ea52e55e63ea2bfae9630e14f22c80ac9/pgsql_schema_diff.py
# chmod +x pgsql_schema_diff.py

#FIXME: Add parameters on actual host then the directory and then the destination/ Mirror or backup. That is 
#geonode-backup -d /data -s horn.rcmrd.org --t localhost - back up to mirror instance
#geonode-backup /data - backup to local directory
#geonode-backup /data --source=geonode@horn.rcmrd.org - back up to directory from live
#geonode-backup /data --source=geonode@horn.rcmrd.org --target=localhost - backup from live to mirror
#geonode-backup /data --source=geonode@horn.rcmrd.org --target=ubuntu@ - backup from live to mirror

if [ $# -eq 0 ];then
    echo "Usage:"
    echo "    geonode-backup username@host backup_dir"
    exit 0
else
    args=("$@")
    HOST=${args[0]}
    BACKUP_DIR=${args[1]}
    COMMAND=${args[2]}
    #FIXME(Jude): Make --mirror an option to the script. For now it is always enabled.
fi

while [ "$3" != "" ]; do
    case $3 in
        -r | --restore )
         #now we perform the resttore on the geonode
         echo "restoration in progress"
         #1. We drop the geonode database we are restoring to
         sudo -u postgres dropdb geonode
         #2. we create a new postgis enabled database
         sudo -u postgres createdb -T template_postgis geonode -O geonode
         #3. We load the backed up database details to the newly created database
	 # -i --ignore passed as a forth parament to skip loading of the database details when not applicable to avoid conflict errors
	 if [ "$4" == "-i" ]; then
	 echo "skipped restoration of backed up database..."
	 else
         sudo -u postgres pg_restore -L $BACKUP_DIR/dbcontents -vxO1d geonode $BACKUP_DIR/geonode.db
	 fi
         #4. Copy the backed up geoserver data dir to the local geonode installation
         sudo rsync -vrPtz $BACKUP_DIR/geoserver /var/lib
         #5. Restore the config in /etc/geonode
         sudo rsync -vrPtz $BACKUP_DIR/config/* /etc/geonode
         #6.we give ownership
         sudo chown -R tomcat6:tomcat6 /var/lib/geoserver
         #7. We do the collect static stuff
         sudo geonode collectstatic -v0
         #7. Restart apache and tomcat
         sudo /etc/init.d/apache2 restart
         sudo /etc/init.d/tomcat6 restart
         echo "done!"
                                ;;
        -b | --backup )
 #1.Get the database of the geonode instance
#was having issues with this because of demanding password which i do not have at the moment for the amazon server
ssh $HOST "pg_dump -Fc geonode > ~/geonode.db"
#sudo -u postgres pg_dump -Fc geonode > ~/geonode.db
date +"FORMAT"
NOW=$(date +"%Y-%m-%d")
#mkdir $BACKUP_DIR/geonode_$NOW/
#2. we get a dump of the template of the postgis
sudo -u postgres pg_dump -Fc template_postgis > $BACKUP_DIR/template_postgis.db
#3. we copy the dump into the directory
rsync -vrPtz -e ssh $HOST:geonode.db $BACKUP_DIR/geonode.db
#4. We deal with the differences between the template and the database
rm -rf $BACKUP_DIR/dbcontents
pgsql_schema_diff.py $BACKUP_DIR/template_postgis.db $BACKUP_DIR/geonode.db > $BACKUP_DIR/dbcontents
#5. We deal with the GeoServer directory
rsync --exclude gwc/ -vrPtz -e  ssh $HOST:/var/lib/geoserver $BACKUP_DIR/
#6. Sync the customisations of the file
rsync -vrPtz -e ssh $HOST:/etc/geonode/* $BACKUP_DIR/config
#we need to add zipping support of the file and its subsequent removal
zip -9 -r  geonode_$NOW.zip $BACKUP_DIR/
#we then delete the huge directory
#rm -r $BACKUP_DIR/geonode_$NOW 

                                ;;

        -m | --mirror) echo "mirroring"
        #1. we deal with the templating files first for now
        sudo rsync -vrPtz -e ssh $HOST:/etc/geonode/* /etc/geonode
        gnmedia
        #2. We now deal with the geoserver files
        sudo rsync -vrPtz -e ssh $HOST:/var/lib/geoserver/* /var/lib/geoserver
        #3. We now deal with the database by getting the database dumps
        ssh $HOST "pg_dump -Fc geonode > ~/geonode.db"
        mkdir /tmp/geonode
        rsync -vrPtz -e ssh $HOST:geonode.db /tmp/geonode/geonode.db
        sudo -u postgres pg_dump -Fc template_postgis > /tmp/geonode/template_postgis.db
        rm -rf /tmp/geonode/dbcontents
        pgsql_schema_diff.py /tmp/geonode/template_postgis.db /tmp/geonode/geonode.db > /tmp/geonode/dbcontents
        sudo /etc/init.d/apache2 stop
        sudo /etc/init.d/tomcat6 stop
        sudo -u postgres dropdb geonode
        sudo -u postgres createdb -T template_postgis geonode -O geonode
        sudo -u postgres pg_restore -L /tmp/geonode/dbcontents -vxO1d geonode /tmp/geonode/geonode.db

        #4. We then give ownership to the file
        sudo chown -R tomcat6:tomcat6 /var/lib/geoserver
        sudo geonode collectstatic -v0
        sudo /etc/init.d/apache2 restart
        sudo /etc/init.d/tomcat6 restart
                                ;;
        -h | --help )           echo "Usage:"
                                exit
                                ;;
        * )                     usage
                                exit 1
    esac
    shift
done
